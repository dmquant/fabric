
import React, { createContext, useState, useContext, ReactNode, FC } from 'react';

type Language = 'en' | 'zh';

interface Translations {
  [key: string]: {
    en: string;
    zh: string;
  };
}

const translations: Translations = {
  // App.tsx
  title: { en: 'Report Visualizer & Narrator', zh: '报告可视化与讲述器' },
  githubLink: { en: 'View on GitHub', zh: '在 GitHub 上查看' },
  downloadAssetsTitle: { en: 'Download & Export Assets', zh: '下载并导出资产' },
  description: { en: 'Provide your report content, choose a generator, and the AI will create a professional, interactive visualization—either a 2D HTML report or an immersive 3D scene.', zh: '提供您的报告内容，选择一个生成器，AI 将创建一个专业、交互式的可视化——可以是 2D HTML 报告，也可以是沉浸式 3D 场景。' },
  reportContentTab: { en: 'Full Report Content', zh: '完整报告内容' },
  reportContentPlaceholder: { en: 'Paste the entire content of your report here...', zh: '在此处粘贴报告的全部内容...' },
  reportContentError: { en: 'Please provide the full report content to generate a visualization.', zh: '请提供完整的报告内容以生成可视化。' },
  vizGeneratorTitle: { en: '2D Report Generator', zh: '2D 报告生成器' },
  vizGeneratorDescription: { en: 'Generate an interactive HTML report from the full content above.', zh: '根据上面的完整内容生成交互式 HTML 报告。' },
  templateLabel: { en: 'Report Template', zh: '报告模板' },
  templateDailyReport: { en: 'Daily Market Report', zh: '每日市场报告' },
  templateLegacy: { en: 'Legacy Dark', zh: '经典深色' },
  templateLiquidGlass: { en: 'Liquid Glass (Dark)', zh: '液态玻璃 (深色)' },
  templateInfographic: { en: 'Modern Infographic', zh: '现代信息图' },
  modelLabel: { en: 'AI Model', zh: 'AI 模型' },
  modelFlash: { en: 'Gemini 2.5 Flash', zh: 'Gemini 2.5 Flash' },
  modelPro: { en: 'Gemini 2.5 Pro', zh: 'Gemini 2.5 Pro' },
  modelFlashLite: { en: 'Gemini 2.5 Flash Lite', zh: 'Gemini 2.5 Flash Lite' },
  generateVizButton: { en: 'Generate 2D Report', zh: '生成 2D 报告' },
  generatingVizButton: { en: 'Generating 2D Report...', zh: '正在生成 2D 报告...' },
  errorPrefix: { en: 'Error:', zh: '错误：' },
  footerText: { en: 'Powered by Google Gemini API', zh: '由 Google Gemini API 驱动' },
  
  // 3D Mode
  threeDeeGeneratorTitle: { en: '3D Scene Generator', zh: '3D 场景生成器' },
  threeDeeGeneratorDescription: { en: 'Generate an immersive 3D visualization of your report.', zh: '生成报告的沉浸式 3D 可视化。' },
  themeLabel: { en: 'Visual Theme', zh: '视觉主题' },
  themeCyberpunk: { en: 'Cyberpunk Neon', zh: '赛博朋克霓虹' },
  themeCorporate: { en: 'Corporate Blue', zh: '商务蓝' },
  themeNature: { en: 'Lush Nature', zh: '繁茂自然' },
  themeShowroom: { en: 'Interactive Showroom', zh: '互动展厅' },
  generate3dButton: { en: 'Generate 3D Scene', zh: '生成 3D 场景' },
  generating3dButton: { en: 'Generating 3D Scene...', zh: '正在生成 3D 场景...' },
  view2DReport: { en: '2D Report', zh: '2D 报告' },
  view3DScene: { en: '3D Scene', zh: '3D 场景' },

  // Auto Presentation Generator
  autoPresentationGeneratorTitle: { en: 'Auto Presentation Generator', zh: '自动演示生成器' },
  autoPresentationGeneratorDescription: { en: 'Generate a fully automated, narrated presentation with AI-generated background visuals.', zh: '生成一个全自动、带旁白和 AI 生成背景的演示。' },
  generatePresentationButton: { en: 'Generate Presentation', zh: '生成演示' },
  generatingPresentationButton: { en: 'Generating Presentation...', zh: '正在生成演示...' },
  presentationLanguageLabel: { en: 'Presentation Language', zh: '演示语言' },
  
  // AutoPresenter.tsx
  generatingAudioStatus: { en: 'Generating high-quality audio...', zh: '正在为您生成高品质语音...' },
  generatingSpeechStatus: { en: 'Generating speech...', zh: '正在生成语音...' },
  audioReadyStatus: { en: 'Narration ready', zh: '旁白已就绪' },
  audioErrorStatus: { en: 'Audio generation failed. Please try again.', zh: '语音生成失败。请重试。' },
  playNarrationButton: { en: 'Play Narration', zh: '播放解说' },
  replayButton: { en: 'Replay', zh: '重新播放' },
  outroTitle: { en: 'Thank you for watching', zh: '感谢您的收看' },
  outroSubtitle: { en: 'This presentation was generated by AI.', zh: '此演示由 AI 生成。' },

  // ThreeDeeVisualizer.tsx
  downloadCodeButton: { en: 'Download Code', zh: '下载代码' },
  sceneNavigation: { en: 'Scene', zh: '场景' },
  generatingAudioButton: { en: 'Generating Audio...', zh: '正在生成音频...' },

  // NarrationPlayer.tsx
  narrationTitle: { en: 'AI Narration', zh: 'AI 旁白' },
  narrationDescription: { en: 'Generate a ~60-second bilingual audio summary of the report.', zh: '生成约60秒的报告双语音频摘要。' },
  generateScriptButton: { en: 'Generate Narration Script', zh: '生成旁白脚本' },
  generatingScriptButton: { en: 'Generating Script...', zh: '正在生成脚本...' },
  narrationErrorPrefix: { en: 'Script Error:', zh: '脚本错误：' },
  speechErrorPrefix: { en: 'Speech Error:', zh: '语音错误：' },
  narrationScript: { en: 'Generated Narration Script', zh: '生成的旁白脚本' },
  playbackLanguageLabel: { en: 'Playback Language', zh: '播放语言' },
  voiceLabel: { en: 'Narration Voice', zh: '旁白声音' },
  play: { en: 'Play', zh: '播放' },
  pause: { en: 'Pause', zh: '暂停' },
  resume: { en: 'Resume', zh: '继续' },
  playAria: { en: 'Play narration', zh: '播放旁白' },
  pauseAria: { en: 'Pause narration', zh: '暂停旁白' },
  stopAria: { en: 'Stop narration', zh: '停止旁白' },
  playFromStartAria: { en: 'Play from beginning', zh: '从头播放' },
  statusReady: { en: 'Ready', zh: '准备就绪' },
  statusLoading: { en: 'Loading...', zh: '加载中...' },
  statusPlaying: { en: 'Playing', zh: '播放中' },
  statusPaused: { en: 'Paused', zh: '已暂停' },

  // ResultPanel.tsx
  resultTitle: { en: 'Generated Report', zh: '生成的报告' },
  copyButton: { en: 'Copy HTML', zh: '复制HTML' },
  copiedButton: { en: 'Copied!', zh: '已复制！' },
  downloadHtmlButton: { en: 'Download HTML', zh: '下载HTML' },
  screenshotsButton: { en: 'Download Screenshots (ZIP)', zh: '下载截图 (ZIP)' },
  capturingButton: { en: 'Capturing...', zh: '截图中...' },
  screenshotErrorPrefix: { en: 'Screenshot Error:', zh: '截图错误：' },

  // Loader.tsx
  loaderText: { en: 'AI is generating your content, please wait...', zh: 'AI 正在生成您的内容，请稍候...' },

  // DownloadManager.tsx
  downloadManagerTitle: { en: 'Download & Export Assets', zh: '下载并导出资产' },
  localZipTab: { en: 'Local ZIP', zh: '本地 ZIP' },
  fabricTab: { en: 'Cloudflare Fabric', zh: 'Cloudflare Fabric' },
  localZipDescription: { en: 'Download all generated assets (HTML, JSON, images, audio, logs) as a single ZIP file.', zh: '将所有生成的资产（HTML、JSON、图像、音频、日志）下载为单个 ZIP 文件。' },
  downloadZipButton: { en: 'Download .zip', zh: '下载 .zip' },
  downloadingZipButton: { en: 'Downloading...', zh: '下载中...' },
  fabricDescription: { en: 'Upload all generated assets to a Cloudflare Fabric Worker for persistent storage and analysis.', zh: '将所有生成的资产上传到 Cloudflare Fabric Worker 以进行持久存储和分析。' },
  fabricUrlLabel: { en: 'Worker URL', zh: 'Worker URL' },
  fabricTokenLabel: { en: 'Bearer Token', zh: 'Bearer 令牌' },
  uploadToFabricButton: { en: 'Upload to Fabric', zh: '上传到 Fabric' },
  uploadingToFabricButton: { en: 'Uploading...', zh: '上传中...' },
  noAssetsMessage: { en: 'No assets have been generated yet. Please generate a report, scene, or presentation first.', zh: '尚未生成任何资产。请先生成报告、场景或演示。' },
  fabricSuccessMessage: { en: 'Successfully uploaded assets to Fabric! Session ID:', zh: '成功将资产上传到 Fabric！会话 ID：' },
};

interface LanguageContextType {
  language: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// FIX: Explicitly type LanguageProvider as a React.FC and define its children prop.
// This improves type safety and can resolve misleading type errors from the compiler.
export const LanguageProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string): string => {
    return translations[key]?.[language] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};